stages:
  - int-test

# Use resource_group as tests use the simulator so they can't run in parallel.
# See https://gitlab.com/gitlab-org/gitlab/issues/15536 for future support of locks.
.common:
  stage: int-test
  resource_group: "ios-simulator"
  tags:
    - xcode
    - mac
    - x64

# Test Swift Package releases (uses Swift Package Manager)
# See docs/release-checklist.md in the objectbox-swift repo on how to create a release.
swiftpm:
  extends: .common
  script:
    - ./test.sh --clean --swiftpm --version 4.4.0

# Test CocoaPods releases
# See docs/release-checklist.md in the objectbox-swift repo on how to create a staging release.
#cocoapods-staging:
#  extends: .common
#  script:
#    - ./test.sh --clean --staging --version "4.4.0-rc.1"

cocoapods-latest:
  extends: .common
  script:
    # Run once without version to check if the latest version is found (then verify log output)
    # These tests take a long time on our current runner, so test no version only on CircleCI
    # - ./test.sh --clean
    - ./test.sh --clean --version 4.4.0
    - ./test.sh --clean --version 4.4.0-sync

# These tests take a long time on our current runner, so test previous version only on CircleCI
#cocoapods-previous:
#  extends: .common
#  script:
#    - ./test.sh --clean --version 4.3.0
#    - ./test.sh --clean --version 4.3.0-sync

# Test Carthage releases
# Only works if runner has matching Swift version
#carthage-latest:
#  extends: .common
#  script:
#    - ./test.sh --carthage-bin
#    - ./test.sh --clean --carthage-bin -v 4.2.0
#
#carthage-staging:
#  extends: .common
#  script:
#    - ./test.sh --staging --carthage -v 1.9.1-rc1
